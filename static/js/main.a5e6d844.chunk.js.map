{"version":3,"sources":["containers/Quiz/Quiz.module.css","components/ActiveQuiz/ActiveQuiz.module.css","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.css","hoc/Layout/Layout.module.css","components/ActiveQuiz/AnswersList/AnswersList.module.css","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","cls","state","push","join","onClick","onAnswerClick","answer","id","text","AnswersList","answers","map","index","key","ActiveQuiz","Question","answerNumber","question","quizLength","Quiz","activeQuestion","answerState","quiz","rightAnswerId","onAnswerClickHandler","answerId","setState","timeout","window","setTimeout","isQuizFinished","console","log","clearTimeout","length","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5e6d844.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__2xU7y\",\"QuizWrapper\":\"Quiz_QuizWrapper__D99k3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__32abf\",\"Question\":\"ActiveQuiz_Question__3xY4V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__3NEgU\",\"success\":\"AnswerItem_success__1OePf\",\"error\":\"AnswerItem_error__2niIc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__2JdWE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__1vEAO\"};","import React, {Component} from 'react'\nimport classes from './Layout.module.css'\n\nclass Layout extends Component {\n  render() {\n      return (\n          <div className={classes.Layout}>\n              <main>{this.props.children}</main>\n          </div>\n      )\n  }\n}\n\nexport default Layout","import React from 'react'\nimport classes from './AnswerItem.module.css'\n\nconst AnswerItem = props => {\n   const cls = [classes.AnswerItem]\n\n   if (props.state) {\n      cls.push(classes[props.state])\n   }\n\n   return (\n      <li\n         className={cls.join(' ')}\n         onClick={() => props.onAnswerClick(props.answer.id)}\n      >\n         { props.answer.text }\n      </li>\n   )\n}\n\nexport default AnswerItem","import React from 'react'\nimport classes from './AnswersList.module.css'\nimport AnswerItem from './AnswerItem/AnswerItem'\n\nconst AnswersList = props => (\n   <ul className={classes.AnswersList}>\n      { props.answers.map((answer, index) => {\n         return (\n            <AnswerItem\n              key={index}\n              answer={answer}\n              onAnswerClick={props.onAnswerClick}\n              state={props.state ? props.state[answer.id] : null}\n            />\n         )\n      })}\n   </ul>\n)\n\nexport default AnswersList","import React from 'react'\nimport classes from './ActiveQuiz.module.css'\nimport AnswersList from './AnswersList/AnswersList'\n\nconst ActiveQuiz = props => (\n    <div className={classes.ActiveQuiz}>\n        <p className={classes.Question}>\n            <span>\n                <strong>{ props.answerNumber }.</strong>&nbsp;\n                { props.question }\n            </span>\n\n            <small>{ props.answerNumber } з { props.quizLength}</small>\n        </p>\n\n        <AnswersList\n          state={props.state}\n           answers={props.answers}\n           onAnswerClick={props.onAnswerClick}\n        />\n    </div>\n)\n\nexport default ActiveQuiz","import React, {Component} from 'react'\nimport classes from './Quiz.module.css'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\n\nclass Quiz extends Component {\n    state = {\n      activeQuestion: 0,\n      answerState: null,\n      quiz: [\n        {\n          question: 'Найпопулярніший бренд алкоголю в світі?',\n          rightAnswerId: 2,\n          id: 1,\n          answers: [\n            {text: 'Johnnie Walker', id: 1},\n            {text: 'Smirnoff', id: 2},\n            {text: 'Bacardi', id: 3},\n            {text: 'Absolut', id: 4}\n            ]\n        },\n        {\n          question: 'Рівень споживання пива в Україні на душу населення за рік?',\n          rightAnswerId: 3,\n          id: 2,\n          answers: [\n            {text: '115 літрівsssss', id: 1},\n            {text: '67 літр', id: 2},\n            {text: '41 літр', id: 3},\n            {text: '29 літр', id: 4}\n          ]\n        }\n        ]\n    }\n\n    onAnswerClickHandler = answerId => {\n      const question = this.state.quiz[this.state.activeQuestion]\n\n      if (question.rightAnswerId === answerId) {\n\n        this.setState({\n          answerState: { [answerId]: 'success' }\n        })\n\n        const timeout = window.setTimeout(() => {\n          if (this.isQuizFinished()) {\n             console.log('FINISh')\n          } else {\n            this.setState({\n              activeQuestion: this.state.activeQuestion + 1,\n              answerState: null\n            })\n          }\n\n          window.clearTimeout(timeout)\n        }, 1000)\n\n      } else {\n        this.setState({\n          answerState: { [answerId]: 'error' }\n        })\n      }\n    }\n\n  isQuizFinished() {\n      return this.state.activeQuestion + 1 === this.state.quiz.length\n  }\n\n    render() {\n        return(\n            <div className={classes.Quiz}>\n                <div className={classes.QuizWrapper}>\n                    <h1>Alco-quiz</h1>\n                    <ActiveQuiz\n                      answers={this.state.quiz[this.state.activeQuestion].answers}\n                      question={this.state.quiz[this.state.activeQuestion].question}\n                      onAnswerClick={this.onAnswerClickHandler}\n                      quizLength={this.state.quiz.length}\n                      answerNumber={this.state.activeQuestion + 1}\n                      state={this.state.answerState}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Quiz","import React from 'react'\nimport './App.css'\nimport Layout from \"./hoc/Layout/Layout\"\nimport Quiz from './containers/Quiz/Quiz'\n\nfunction App() {\n  return (\n      <Layout>\n        <Quiz />\n      </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}